#include <iostream>
#include <fstream>
#include <cstdlib>
#include <cstring>
#include <unistd.h>
#include <sys/socket.h>
#include <netinet/in.h>
using namespace std;
int main()
{
    int server, client;
    struct sockaddr_in addserver, addclient;

    server = socket(AF_INET, SOCK_STREAM, 0);
    if (server == 0)
    {
        cerr << "Socket creation error" << endl;
        return 1;
    }

    addserver.sin_family = AF_INET;
    addserver.sin_addr.s_addr = INADDR_ANY;
    addserver.sin_port = htons(8080);

    if (bind(server, (struct sockaddr *)&addserver, sizeof(addserver)) < 0)
    {
        cerr << "Binding error" << endl;
        return 1;
    }

    listen(server, 5);
    cout << "Localhost" << endl;

    char buffer[1024] = {0};

    while (true)
    {
        client = accept(server, (struct sockaddr *)&addclient, (socklen_t *)&addclient);
        if (client < 0)
        {
            cerr << "error" << endl;
            continue;
        }

        int valread = read(client, buffer, 1024);
        if (valread < 0)
        {
            cerr << "Reading error" << endl;
            close(client);
            continue;
        }

        string file_name;
        ifstream file(file_name, ios::binary);
        if (!file.is_open())
        {
            cerr << "Error opening file: " << file_name << endl;
            close(client);
            continue;
        }

        file.seekg(0, ios::end);
        int file_size = file.tellg();
        file.seekg(0, ios::beg);

        char *file_contents = new char[file_size];
        file.read(file_contents, file_size);
        file.close();

        send(client, file_contents, file_size, 0);

        delete[] file_contents;
        close(client);
    }

    close(server);
    return 0;
}
